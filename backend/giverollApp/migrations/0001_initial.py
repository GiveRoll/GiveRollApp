# Generated by Django 5.2.5 on 2025-09-04 20:13

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Prize',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
                ('value', models.IntegerField()),
                ('image', models.ImageField(blank=True, null=True, upload_to='prize_images/')),
                ('number_winners', models.IntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('Brand_name', models.CharField(blank=True, max_length=150, null=True)),
                ('industry', models.CharField(blank=True, max_length=250, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('block_status', models.BooleanField(default=False)),
                ('full_name', models.CharField(blank=True, max_length=200, null=True)),
                ('phone_number', models.PositiveBigIntegerField(blank=True, null=True)),
                ('DOB', models.DateField(blank=True, null=True)),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='profile_images/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Draw',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=500)),
                ('action', models.IntegerField(default=0)),
                ('number_participants', models.IntegerField(default=20)),
                ('generate_link', models.CharField(blank=True, max_length=500, null=True)),
                ('embed_link', models.CharField(blank=True, max_length=500, null=True)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('last_drafted', models.DateTimeField(blank=True, null=True)),
                ('ended_date', models.DateTimeField(blank=True, null=True)),
                ('active_till', models.DurationField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('facebook', models.BooleanField(default=False)),
                ('x', models.BooleanField(default=False)),
                ('tiktok', models.BooleanField(default=False)),
                ('instagram', models.BooleanField(default=False)),
                ('youtube', models.BooleanField(default=False)),
                ('number_winners', models.IntegerField(default=1)),
                ('description', models.TextField(blank=True, null=True)),
                ('terms_of_condition', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('active', 'active'), ('completed', 'completed'), ('draft', 'draft')], default='active', max_length=10)),
                ('created_at', models.TimeField(auto_now=True)),
                ('host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('prize', models.ManyToManyField(blank=True, null=True, to='giverollApp.prize')),
            ],
        ),
        migrations.CreateModel(
            name='Winners',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
                ('email', models.EmailField(max_length=254, null=True, unique=True)),
                ('chosen_at', models.DateTimeField()),
                ('email_status', models.CharField(choices=[('sent', 'sent'), ('not sent', 'not sent'), ('pending', 'pending')], default='not sent', max_length=10)),
                ('prize_status', models.BooleanField(default=False)),
                ('account_number', models.PositiveIntegerField(default=0)),
                ('bank_account_name', models.CharField(blank=True, max_length=255, null=True)),
                ('bank_name', models.CharField(blank=True, max_length=255, null=True)),
                ('contact_number', models.PositiveIntegerField(default=0)),
                ('pickup_address', models.CharField(blank=True, max_length=500, null=True)),
                ('confirmation_code', models.CharField(blank=True, max_length=6, null=True)),
                ('draw', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='giverollApp.draw')),
            ],
        ),
        migrations.CreateModel(
            name='Participants',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('gender', models.CharField(max_length=7, null=True)),
                ('platorm', models.CharField(max_length=100, null=True)),
                ('social_handle', models.CharField(blank=True, max_length=150, null=True, unique=True)),
                ('joined_at', models.TimeField(auto_now=True)),
                ('draw', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='giverollApp.draw')),
            ],
            options={
                'unique_together': {('draw', 'email', 'name')},
            },
        ),
    ]
